Update the image resources used with the high-res versions that Android
itself uses, so we render more nicely on Droid/Nexus. 

Loading on a G1 with *lots* of apps is terribly slow now with the new 
backend (> 1 minute). We could employ caching to improve this, based 
on the package version number. Only when that one changes do we 
refresh the cache. The "reload" feature would then act as a refresh
of the full cache.

Show a notification whenever a package is added or updated that includes
new autostarts; this makes it easy to "review" all autostarts as new
applications are installed. Ironically, we will have to register a
broadcast receiver ourselves to implement this.

The notification-feature is a good opportunity to implement some kind
of hashing, where we can determine whether I package is new or has changed
very quickly, instead of having to reparse it again everytime, which 
turns out to be a costly process (our new backend is considerably slower
then the old one).

For actions like SECRET_CODE_ACTION it would be interesting to show the
intent filter that it matches. For example, the voice dialer here matches
only a certain scheme, and others handle it in a similar manner
(http://www.google.com/codesearch?hl=en&sa=N&filter=0&q=android_secret_code).
Even for PACKAGE_ADDED et al. it's possible for an application to only
register for a specific package. This needs to be made clear to the user
some way, lest he think the app is starting more often than it really is.

Fix the "USB Debugging" hang issue. See ToggleTask.java for more info.

The dropdown icons of the ExpandableListView are not properly rendered on a
QVGA 120dpi device (tested in emulator), with anyDensity=true. Since we
don't even really touch those, we need to assume it's a bug in Android.
Confirm (file a report), and try to find a workaround.

Add a dialog referring to our other projects / apps.

Support grouping by application.

Now that we may have quite a long list, depending on installed apps,
a sorting options might also make sense. We could sort alphabetically, 
by the number of components in a group, or by "importance" of a receiver.
The latter would be a number determined by us, and would be an attempt
to maintain the current order, i.e. BOOT would be on top.

Another possible attempt to keep the list clean would be a filter that
removes all apps which register for their own intents. Since nobody
"owns" an action, this can't be determined in a 100% guaranteed way,
but for many cases, comparing the namespace strings should suffice.

Helpful would also be the ability to filter the list using a hardware
keyboard, similar to the contact list could be filtered previous to
the introduction of global search. I believe there should be some builtin
facilities that we should use to provide this.

Currently, we don't pay any attention to the fact that a single receiver
may be responsible for multiple events. As a result, disabling a single
component may effect multiple entries. At the very least, the UI should
update accordingly when a component is disabled (striking out multiple
rows).

There are a number of broadcasts which effectively seem to be equivalent to
BOOT_COMPLETED, like a lot of the network state change stuff. Maybe this
could be made more obvious to the user.

Update our custom colors to be stateful.

Add a "system view" that goes through packages.xml manually and shows
all receivers (or even: all components?), allowing users to disable or
enable them. Explain in help section, why this separate view is necessary:
Because due to API limitations (GET_INTENT_FILTERS not implemented), we
are unable to get information about which intents a disabled component
would handle.

Implement the ability to disable a app as a whole; nice to get rid of
pre-installed applications.

Some guy here wrote up explanations for a number of broadcasts, some of
which are still missing from our db:
    http://androidvoid.blogspot.com/2009/04/android-broadcast-intent-message.html

Far-Future Ideas, might never be implemented
============================================

Use a enabled/disabled receiver to automatically reload if a package
outside of our app is changed.

We could use a custom executable instead of "pm", allowing us to call
setComponentEnabledState with the NO_RESTART flag - currently, the
package is always restarted when we chance something. Code to look at
in frameworks/base:
  cmds/pm/pm
  cmds/pm/src/../Pm.java
  cmds/app_process/*

Add social features: People can write comments about individual
components, and what effects disabling them had. This would need to include
information about the version etc. We probably would want to work with
the OpenIntents.org database here; we could even act as an automated 
data source for OpenIntents by submitting which applications hook into
which broadcast intents.
