Show a notification whenever a package is added or updated that includes
new autostarts; this makes it easy to "review" all autostarts as new
applications are installed. Ironically, we will have to register a
broadcast receiver ourselves to implement this.

For actions like SECRET_CODE_ACTION it would be interesting to show the
intent filter that it matches. For example, the voice dialer here matches
only a certain scheme, and others handle it in a similar manner
(http://www.google.com/codesearch?hl=en&sa=N&filter=0&q=android_secret_code).
Even for PACKAGE_ADDED et al. it's possible for an application to only
register for a specific package. This needs to be made clear to the user
some way, lest he think the app is starting more often than it really is.

When "USB Debugging" is disabled, "su" in some cases never returns. It
seems to be a well known bug in Superuser Whitelist, and our usage of
su seems to trigger it. But it's not the case for all su calls. In
particular, we've had some sporadic successes running "pm" directly rather
than through a shell script.
Most other apps seem to do their root calls through opening a "su" process
and piping commands into stdin:
	http://www.google.com/codesearch/p?hl=en#cCJG8drNlnc/trunk/latitudelauncher/src/com/geekyouup/android/latlauncher/LatitudeLauncher.java&q=%22su%22%20sh%20lang:java%20android%20Process&sa=N&cd=100&ct=rc&l=117
	http://www.google.com/codesearch/p?hl=en#MBcftcuqEzg/trunk/android/src/org/hfoss/posit/RWGService.java&q=%22su%22%20sh%20lang:java%20android%20Process&sa=N&cd=72&ct=rc&l=61
	http://www.google.com/codesearch/p?hl=en#g6yx7vKLTS0/trunk/android-sercd/project/src/gnu/sercd/Sercd.java&q=%22su%22%20sh%20lang:java%20android%20Process&sa=N&cd=101&ct=rc&l=71
	http://www.google.com/codesearch/p?hl=en#slEzds0kxxw/trunk/src/net/biaji/android/cmwrap/utils/Utils.java&q=%22su%22%20sh%20lang:java%20android%20Process&sa=N&cd=43&ct=rc&l=210
	http://www.google.com/codesearch/p?hl=en#BwQ6HuYx4dA/trunk/hermes/src/android/hermes/AdHocWifiManager.java&q=%22su%22%20sh%20lang:java%20android%20Process&sa=N&cd=69&ct=rc
android-wifi-thether does it similar to us, running a script via "su -c",
but it too works without USB Debugging. The differences as far as I can see
are:
	- Use of native lib rather than Java Exec (NativeTask).
	- The command run is not a shell script, but a compiled executable
	  with the +x flag.
Other links of relevance:
	http://code.google.com/p/market-enabler/wiki/ShellCommands
	http://www.stealthcopter.com/blog/2010/01/android-requesting-root-access-in-your-app/
	http://gimite.net/en/index.php?Run%20native%20executable%20in%20Android%20App
	http://groups.google.com/group/android-wifi-tether/browse_thread/thread/20a1228d9ac7eb81
	http://forum.xda-developers.com/showthread.php?t=509592&page=2
	http://groups.google.com/group/android-developers/browse_thread/thread/ba1b58cd30a98b96
What we can do:
	- Try with +x flag set.
	- Try +x flag + NativeTask.
	- Try su pipe.
	- Try new CM rom, see if it's fixed there.

The dropdown icons of the ExpandableListView are not properly rendered on a
QVGA 120dpi device (tested in emulator), with anyDensity=true. Since we
don't even really touch those, we need to assume it's a bug in Android.
Confirm (file a report), and try to find a workaround.

Add a dialog referring to our other projects / apps.

It seems on some devices, disabling doesn't work. The error we see is:
  D/Autostarts(  378): Process returned with 254; stdout: ; stderr: su: exec failed for sh
  /data/data/com.elsdoerfer.android.autostarts/files/pm-call.sh Error:No such file or directory
This is what the problem might be:
  http://code.google.com/p/android-wifi-tether/issues/detail?id=111
A potential solution is suggested here:
  http://code.google.com/p/android-wifi-tether/issues/detail?id=136
and basically consists of trying multiple syntaxes:
    if (NativeTask.runCommand("su -c \""+command+"\"") == 0) {
       return true;
    }
    if (NativeTask.runCommand("su -c "+command+"") == 0) {
      return true;
    }
    if (NativeTask.runCommand("/system/xbin/su -c \""+command+"\"") == 0) {
      return true;
    }
    if (NativeTask.runCommand("/system/xbin/su -c "+command+"") == 0) {
      return true;
    }
See also our email conversation with Alex Speed Kjeldsen.

Support grouping by application.

Currently, we don't pay any attention to the fact that a single receiver
may be responsible for multiple events. As a result, disabling a single
component may effect multiple entries. At the very least, the UI should
update accordingly when a component is disabled (striking out multiple
rows).

Update our custom colors to be stateful.

Add a "system view" that goes through packages.xml manually and shows
all receivers (or even: all components?), allowing users to disable or
enable them. Explain in help section, why this separate view is necessary:
Because due to API limitations (GET_INTENT_FILTERS not implemented), we
are unable to get information about which intents a disabled component
would handle.

Implement the ability to disable a app as a whole; nice to get rid of
pre-installed applications.

Far-Future Ideas, might never be implemented
============================================

Use a enabled/disabled receiver to automatically reload if a package
outside of our app is changed.

We could use a custom executable instead of "pm", allowing us to call
setComponentEnabledState with the NO_RESTART flag - currently, the
package is always restarted when we chance something. Code to look at
in frameworks/base:
  cmds/pm/pm
  cmds/pm/src/../Pm.java
  cmds/app_process/*

Add social features: People can write comments about individual
components, and what effects disabling them had. This would need to include
information about the version etc.