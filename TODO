Show a notification whenever a package is added or updated that includes
new autostarts; this makes it easy to "review" all autostarts as new
applications are installed. Ironically, we will have to register a
broadcast receiver ourselves to implement this.

BIG ISSUE: Not all handlers are found; namely, in cases where the intent 
filter is written to match on URI or category. As a temporary workaround,
for some selected actions we query using fake data, but really, the issue
can't be solved right using our current query approach. We really need 
a way to properly get all receivers on a package by package basis. Also,
there is an UI issue here. For example the SECRET_CODE_ACTION intent - 
the voice dialer here matches only a certain scheme, and others handle it 
in a similar manner (http://www.google.com/codesearch?hl=en&sa=N&filter=0&q=android_secret_code).
Even for PACKAGE_ADDED et al. it's possible for an application to only 
register for a specific package. This needs to be made clear to the user 
someway, lest he think the app is starting more often than it really is.

In rare cases, on some ROMs, "su" never seems to return; see eMail from
Ryan Cobden, 2009-07-11 and Herb, 2009-12-22.
android-wifi-thether seems to have tried to different approaches to fix
the issue as well:
	http://code.google.com/p/android-wifi-tether/source/detail?r=168
	http://code.google.com/p/android-wifi-tether/source/detail?r=208
See:
	http://groups.google.com/group/android-wifi-tether/browse_thread/thread/20a1228d9ac7eb81

The dropdown icons of the ExpandableListView are not properly rendered on a
QVGA 120dpi device (tested in emulator), with anyDensity=true. Since we
don't even really touch those, we need to assume it's a bug in Android.
Confirm (file a report), and try to find a workaround.

Add a dialog referring to our other projects / apps.

It seems on some devices, disabling doesn't work. The error we see is:
  D/Autostarts(  378): Process returned with 254; stdout: ; stderr: su: exec failed for sh
  /data/data/com.elsdoerfer.android.autostarts/files/pm-call.sh Error:No such file or directory
This is what the problem might be:
  http://code.google.com/p/android-wifi-tether/issues/detail?id=111
A potential solution is suggested here:
  http://code.google.com/p/android-wifi-tether/issues/detail?id=136
and basically consists of trying multiple syntaxes:
    if (NativeTask.runCommand("su -c \""+command+"\"") == 0) {
       return true;
    }
    if (NativeTask.runCommand("su -c "+command+"") == 0) {
      return true;
    }
    if (NativeTask.runCommand("/system/xbin/su -c \""+command+"\"") == 0) {
      return true;
    }
    if (NativeTask.runCommand("/system/xbin/su -c "+command+"") == 0) {
      return true;
    }
See also our email conversation with Alex Speed Kjeldsen.

Can't we just store the list of disabled components somewhere like in
/data/system/autostarts-disabled.txt? We do have, after all, root access.
We'd make sure we write to a separate file and then rm&mv it over, to
avoid half-written files on crashes.

Add a "security log" feature that basically exports the "disabled
components" database to the sdcard in the form of "pm enable" commands,
automatically and in regular intervals.
Add a help entry explaining how to use this file in case something goes
wrong, to restore components.

Support grouping by application.

Currently, we don't pay any attention to the fact that a single receiver
may be responsible for multiple events. As a result, disabling a single
component may effect multiple entries. At the very least, the UI should
update accordingly when a component is disabled (striking out multiple
rows).

Update our custom colors to be stateful.

Add a "system view" that goes through packages.xml manually and shows
all receivers (or even: all components?), allowing users to disable or
enable them. Explain in help section, why this separate view is necessary:
Because due to API limitations (GET_INTENT_FILTERS not implemented), we
are unable to get information about which intents a disabled component
would handle.

Implement the ability to disable a app as a whole; nice to get rid of
pre-installed applications.

Far-Future Ideas, might never be implemented
============================================

Use a enabled/disabled receiver to automatically reload if a package
outside of our app is changed.

We could use a custom executable instead of "pm", allowing us to call
setComponentEnabledState with the NO_RESTART flag - currently, the
package is always restarted when we chance something. Code to look at
in frameworks/base:
  cmds/pm/pm
  cmds/pm/src/../Pm.java
  cmds/app_process/*

Add social features: People can write comments about individual
components, and what effects disabling them had. This would need to include
information about the version etc.